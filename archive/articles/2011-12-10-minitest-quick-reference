<p>UPDATE: I&#39;ve added a new section on stubbing with MiniTest and a few
helpful comments to the code samples.</p>

<p><a href="https://github.com/seattlerb/minitest">MiniTest</a>, as the name suggests, is a
small and fast unit testing framework. Shipped with Ruby 1.9, MiniTest supports
a complete suite of testing capabilities such as TDD, BDD, mocking, and benchmarking.</p>

<p>This quick reference aims to demonstrate MiniTest&#39;s main concepts and
provide real world examples to get you acquainted quickly. Let&#39;s start with
MiniTest::Spec.</p>

<h3>MiniTest::Spec</h3>

<p>Provides RSpec-like matchers and contexts right out of the box.</p>
<div class="highlight"><pre class="highlight ruby"><code><span class="nb">require</span> <span class="s1">'minitest/autorun'</span>

<span class="n">describe</span> <span class="no">Hipster</span><span class="p">,</span> <span class="s2">"Demonstration of MiniTest"</span> <span class="k">do</span>

  <span class="c1"># Runs codes before each expectation</span>
  <span class="n">before</span> <span class="k">do</span>
    <span class="vi">@hipster</span> <span class="o">=</span> <span class="no">Hipster</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">end</span>

  <span class="c1"># Runs code after each expectation</span>
  <span class="n">after</span> <span class="k">do</span>
    <span class="vi">@hipster</span><span class="p">.</span><span class="nf">destroy!</span>
  <span class="k">end</span>

  <span class="c1"># Define accessors - lazily runs code when it's first used</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:hipster</span><span class="p">)</span> <span class="p">{</span> <span class="no">Hipster</span><span class="p">.</span><span class="nf">new</span><span class="p">}</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:traits</span><span class="p">)</span> <span class="p">{</span> <span class="p">[</span><span class="s2">"silly hats"</span><span class="p">,</span> <span class="s2">"skinny jeans"</span><span class="p">]</span> <span class="p">}</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:labels</span><span class="p">)</span> <span class="p">{</span> <span class="no">Array</span><span class="p">.</span><span class="nf">new</span> <span class="p">}</span>

  <span class="c1"># Even lazier accessor - assigns `subject` as the name for us</span>
  <span class="c1"># this equivalent to let(:subject) { Hipster.new }</span>
  <span class="n">subject</span> <span class="p">{</span> <span class="no">Hipster</span><span class="p">.</span><span class="nf">new</span> <span class="p">}</span>

  <span class="n">it</span> <span class="s2">"#define"</span> <span class="k">do</span>
    <span class="n">hipster</span><span class="p">.</span><span class="nf">define</span><span class="p">.</span><span class="nf">must_equal</span> <span class="s2">"you wouldn't understand"</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">"#walk?"</span> <span class="k">do</span>
    <span class="n">skip</span> <span class="s2">"I prefer to skip"</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s2">"when asked about the font"</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">"should be helvetica"</span> <span class="k">do</span>
      <span class="vi">@hipster</span><span class="p">.</span><span class="nf">preferred_font</span><span class="p">.</span><span class="nf">must_equal</span> <span class="s2">"helvetica"</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s2">"when asked about mainstream"</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">"won't be mainstream"</span> <span class="k">do</span>
      <span class="vi">@hipster</span><span class="p">.</span><span class="nf">mainstream?</span><span class="p">.</span><span class="nf">wont_equal</span> <span class="kp">true</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<h4>Matchers (must | wont)</h4>

<p>In most cases you can switch between <code>must</code> for positive expectations and <code>wont</code>
for negative expectations.</p>

<table><thead>
<tr>
<th style="text-align: left">Assertion</th>
<th style="text-align: left">Examples</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: left"><code>must_be</code></td>
<td style="text-align: left"><code>labels.size.must_be :==, 0</code></td>
</tr>
<tr>
<td style="text-align: left"><code>must_be_close_to</code></td>
<td style="text-align: left"><code>traits.size.must_be_close_to 1,1</code></td>
</tr>
<tr>
<td style="text-align: left"><code>must_be_empty</code></td>
<td style="text-align: left"><code>labels.must_be_empty</code></td>
</tr>
<tr>
<td style="text-align: left"><code>must_be_instance_of</code></td>
<td style="text-align: left"><code>hipster.must_be_instance_of Hipster</code></td>
</tr>
<tr>
<td style="text-align: left"><code>must_be_kind_of</code></td>
<td style="text-align: left"><code>labels.must_be_kind_of Enumerable</code></td>
</tr>
<tr>
<td style="text-align: left"><code>must_be_nil</code></td>
<td style="text-align: left"><code>labels.first.must_be_nil</code></td>
</tr>
<tr>
<td style="text-align: left"><code>must_be_same_as</code></td>
<td style="text-align: left"><code>traits.must_be_same_as traits</code></td>
</tr>
<tr>
<td style="text-align: left"><code>must_be_silent</code></td>
<td style="text-align: left"><code>proc { &quot;no stdout or stderr&quot; }.must_be_silent</code></td>
</tr>
<tr>
<td style="text-align: left"><code>must_be_within_epsilon</code></td>
<td style="text-align: left"><code>traits.size.must_be_within_epsilon 1,1</code></td>
</tr>
<tr>
<td style="text-align: left"><code>must_equal</code></td>
<td style="text-align: left"><code>traits.size.must_equal 2</code></td>
</tr>
<tr>
<td style="text-align: left"><code>must_include</code></td>
<td style="text-align: left"><code>traits.must_include &quot;skinny jeans&quot;</code></td>
</tr>
<tr>
<td style="text-align: left"><code>must_match</code></td>
<td style="text-align: left"><code>traits.first.must_match /silly/</code></td>
</tr>
<tr>
<td style="text-align: left"><code>must_output</code></td>
<td style="text-align: left"><code>proc { print &quot;#{traits.size}!&quot; }.must_output &quot;2!&quot;</code></td>
</tr>
<tr>
<td style="text-align: left"><code>must_respond_to</code></td>
<td style="text-align: left"><code>traits.must_respond_to :count</code></td>
</tr>
<tr>
<td style="text-align: left"><code>must_raise</code></td>
<td style="text-align: left"><code>proc { traits.foo }.must_raise NoMethodError</code></td>
</tr>
<tr>
<td style="text-align: left"><code>must_send</code></td>
<td style="text-align: left"><code>traits.must_send [traits, :values_at, 0]</code></td>
</tr>
<tr>
<td style="text-align: left"><code>must_throw</code></td>
<td style="text-align: left"><code>proc { throw Exception if traits.any? }.must_throw Exception</code></td>
</tr>
</tbody></table>

<h3>MiniTest::Unit::TestCase</h3>

<p>Provides a rich set of assertions to make your tests clean and readable.</p>
<div class="highlight"><pre class="highlight ruby"><code><span class="nb">require</span> <span class="s1">'minitest/autorun'</span>

<span class="k">class</span> <span class="nc">TestHipster</span> <span class="o">&lt;</span> <span class="no">MiniTest</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
  <span class="k">def</span> <span class="nf">setup</span>
    <span class="vi">@hipster</span> <span class="o">=</span> <span class="no">Hipster</span><span class="p">.</span><span class="nf">new</span>
    <span class="vi">@labels</span>  <span class="o">=</span> <span class="no">Array</span><span class="p">.</span><span class="nf">new</span>
    <span class="vi">@traits</span>  <span class="o">=</span> <span class="p">[</span><span class="s2">"silly hats"</span><span class="p">,</span> <span class="s2">"skinny jeans"</span><span class="p">]</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">teardown</span>
    <span class="vi">@hipster</span><span class="p">.</span><span class="nf">destroy!</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">test_for_helvetica_font</span>
    <span class="n">assert_equal</span> <span class="s2">"helvetica!"</span><span class="p">,</span> <span class="vi">@hipster</span><span class="p">.</span><span class="nf">preferred_font</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">test_not_mainstream</span>
    <span class="n">refute</span> <span class="vi">@hipster</span><span class="p">.</span><span class="nf">mainstream?</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<h4>Assertions (assert | refute)</h4>

<p>Toggle between <code>assert</code> for positive assertions and <code>refute</code> for negative assertions.</p>

<table><thead>
<tr>
<th style="text-align: left">Assertion</th>
<th style="text-align: left">Example</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: left"><code>assert</code></td>
<td style="text-align: left"><code>assert @traits.any?, &quot;empty subjects&quot;</code></td>
</tr>
<tr>
<td style="text-align: left"><code>assert_empty</code></td>
<td style="text-align: left"><code>assert_empty @labels</code></td>
</tr>
<tr>
<td style="text-align: left"><code>assert_equal</code></td>
<td style="text-align: left"><code>assert_equal 2, @traits.size</code></td>
</tr>
<tr>
<td style="text-align: left"><code>assert_in_delta</code></td>
<td style="text-align: left"><code>assert_in_delta @traits.size, 1,1</code></td>
</tr>
<tr>
<td style="text-align: left"><code>assert_in_epsilon</code></td>
<td style="text-align: left"><code>assert_in_epsilon @traits.size, 1, 1</code></td>
</tr>
<tr>
<td style="text-align: left"><code>assert_includes</code></td>
<td style="text-align: left"><code>assert_includes @traits, &quot;skinny jeans&quot;</code></td>
</tr>
<tr>
<td style="text-align: left"><code>assert_instance_of</code></td>
<td style="text-align: left"><code>assert_instance_of Hipster, @hipster</code></td>
</tr>
<tr>
<td style="text-align: left"><code>assert_kind_of</code></td>
<td style="text-align: left"><code>assert_kind_of Enumerable, @labels</code></td>
</tr>
<tr>
<td style="text-align: left"><code>assert_match</code></td>
<td style="text-align: left"><code>assert_match @traits.first, /silly/</code></td>
</tr>
<tr>
<td style="text-align: left"><code>assert_nil</code></td>
<td style="text-align: left"><code>assert_nil @labels.first</code></td>
</tr>
<tr>
<td style="text-align: left"><code>assert_operator</code></td>
<td style="text-align: left"><code>assert_operator @labels.size, :== , 0</code></td>
</tr>
<tr>
<td style="text-align: left"><code>assert_output</code></td>
<td style="text-align: left"><code>assert_output(&quot;Size: 2&quot;) { print &quot;Size: #{@traits.size}&quot;}</code></td>
</tr>
<tr>
<td style="text-align: left"><code>assert_raises</code></td>
<td style="text-align: left"><code>assert_raises(NoMethodError) { @traits.foo }</code></td>
</tr>
<tr>
<td style="text-align: left"><code>assert_respond_to</code></td>
<td style="text-align: left"><code>assert_respond_to @traits, :count</code></td>
</tr>
<tr>
<td style="text-align: left"><code>assert_same</code></td>
<td style="text-align: left"><code>assert_same @traits, @traits, &quot;It&#39;s the same object silly&quot;</code></td>
</tr>
<tr>
<td style="text-align: left"><code>assert_send</code></td>
<td style="text-align: left"><code>assert_send [@traits, :values_at, 0]</code></td>
</tr>
<tr>
<td style="text-align: left"><code>assert_silent</code></td>
<td style="text-align: left"><code>assert_silent { &quot;no stdout or stderr&quot; }</code></td>
</tr>
<tr>
<td style="text-align: left"><code>assert_throws</code></td>
<td style="text-align: left"><code>assert_throws(Exception,&#39;is empty&#39;) {throw Exception if @traits.any?}</code></td>
</tr>
</tbody></table>

<h3>MiniTest#stub</h3>

<p>Minitest provides a simple <code>stub</code> method we can use to return a pre-determined value.</p>
<div class="highlight"><pre class="highlight ruby"><code><span class="nb">require</span> <span class="s1">'minitest/autorun'</span>

<span class="n">describe</span> <span class="no">Hipster</span><span class="p">,</span> <span class="s2">"Demonstrates stubbing with Minitest"</span> <span class="k">do</span>

  <span class="n">let</span><span class="p">(</span><span class="ss">:hipster</span><span class="p">)</span> <span class="p">{</span> <span class="no">Hipster</span><span class="p">.</span><span class="nf">new</span> <span class="p">}</span>

  <span class="n">it</span> <span class="s2">"trendy if time is now"</span> <span class="k">do</span>
    <span class="n">assert</span> <span class="n">hipster</span><span class="p">.</span><span class="nf">trendy?</span> <span class="no">DateTime</span><span class="p">.</span><span class="nf">now</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">"it is NOT trendy if 2 weeks has past"</span> <span class="k">do</span>
    <span class="no">DateTime</span><span class="p">.</span><span class="nf">stub</span> <span class="ss">:now</span><span class="p">,</span> <span class="p">(</span><span class="no">Date</span><span class="p">.</span><span class="nf">today</span><span class="p">.</span><span class="nf">to_date</span> <span class="o">-</span> <span class="mi">14</span><span class="p">)</span> <span class="k">do</span>
      <span class="n">refute</span> <span class="n">hipster</span><span class="p">.</span><span class="nf">trendy?</span> <span class="no">DateTime</span><span class="p">.</span><span class="nf">now</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

</code></pre></div>
<h3>MiniTest::Mock</h3>

<p>A simple and clean mock system. There two essential methods at our disposal:
<code>expect</code> and <code>verify</code>.</p>
<div class="highlight"><pre class="highlight ruby"><code><span class="nb">require</span> <span class="s1">'minitest/autorun'</span>

<span class="c1"># Make all of our Twitter updates hip</span>
<span class="k">class</span> <span class="nc">Twipster</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">twitter</span><span class="p">)</span>
    <span class="vi">@twitter</span> <span class="o">=</span> <span class="n">twitter</span> <span class="c1"># A Twitter API client</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">tweet</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
    <span class="vi">@twitter</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="s2">"</span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="s2"> #lolhipster"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># Uses Mock#expect and Mock#verify</span>
<span class="n">describe</span> <span class="no">Twipster</span><span class="p">,</span> <span class="s2">"Make every tweet a hipster tweet."</span> <span class="k">do</span>
  <span class="n">before</span> <span class="k">do</span>
    <span class="vi">@twitter</span>  <span class="o">=</span> <span class="no">MiniTest</span><span class="o">::</span><span class="no">Mock</span><span class="p">.</span><span class="nf">new</span> <span class="c1"># Mock our Twitter API client</span>
  <span class="k">end</span>

  <span class="n">let</span><span class="p">(</span><span class="ss">:twipster</span><span class="p">)</span> <span class="p">{</span> <span class="no">Twipster</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="vi">@twitter</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:message</span><span class="p">)</span> <span class="p">{</span> <span class="s2">"Skyrim? Too mainstream."</span><span class="p">}</span>

  <span class="n">it</span> <span class="s2">"should append a #lolhipster hashtag and update Twitter with our status"</span> <span class="k">do</span>
    <span class="vi">@twitter</span><span class="p">.</span><span class="nf">expect</span> <span class="ss">:update</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="p">[</span><span class="s2">"</span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="s2"> #lolhipster"</span><span class="p">]</span>
    <span class="vi">@twipster</span><span class="p">.</span><span class="nf">tweet</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>

    <span class="n">assert</span> <span class="vi">@twitter</span><span class="p">.</span><span class="nf">verify</span> <span class="c1"># verifies tweet and hashtag was passed to `@twitter.update`</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<h3>Resources</h3>

<ol>
<li><a href="https://github.com/seattlerb/minitest">MiniTest on Github</a></li>
<li><a href="http://docs.seattlerb.org/minitest">MiniTest Rdoc</a></li>
<li><a href="http://metaskills.net/2011/03/26/using-minitest-spec-with-rails">Using MiniTest::Spec with Rails</a></li>
<li><a href="http://www.rubyinside.com/a-minitestspec-tutorial-elegant-spec-style-testing-that-comes-with-ruby-5354.html">Ruby Inside: A MiniTest::Spec Tutorial: Elegant Spec-Style Testing That Comes With Ruby</a></li>
</ol>

<p>I hope you found this quick guide valuable. Please let me know if you&#39;d like
to see anything else included and feel free to ask questions or give feedback
in the comments section.</p>
